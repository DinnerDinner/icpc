'''Priority Queue:

P.add(k,v): insert item with key k and value v into priority queue Priority
P.min(): return tuple (k,v) where v is min overall
P.removeMin(): remove and return tuple (k,v) with minimum priority
P.isEmpty(): return True if P is empty, False otherwise

Heaps(best underlying structure for P queues):
--> complete binary tree (filled binary tree)
--> each internal node has value smaller than its children 

--> array implementation
methods:
--> _parent(j): parent of j
--> left(j): left child of j (2*j+1)
--> right(j): right child of j (2*j+2)
--> hasLeft(j): true if j has a left child 
--> hasRight(j):true if j has a right child
--> swap(i,j): swap i and j(during heapification)
--> upheap(j): heapify toward the root from j (private)
--> downheap(j): heapify from j to a leaf
--> len(H): number of elements in heap h
--> add(k, v): add key value pair into the heap h
--> min(): min element value in h
--> removeMin(): remove min key in H(i.e. the root of heap) 
and return corresponding values(using upheap or downheap)'''
